<?xml version="1.0"?>
<rss version="2.0">
   <channel>
      <title></title>
      <link>http://tkdchen.me</link>
      <description></description>
      <language>zh-CN</language>
      <copyright>Copyright 2014, Chenxiong Qi</copyright>
      
      <pubDate>Mon, 15 Sep 2014 04:48:20 +0800</pubDate>
      <lastBuildDate>Mon, 15 Sep 2014 04:48:20 +0800</lastBuildDate>
      
      <generator>jekyll</generator>
      <managingEditor>qcxhome@gmail.com (Chenxiong Qi)</managingEditor>
      <webMaster>qcxhome@gmail.com (Chenxiong Qi)</webMaster>
      
      <item>
        <title>GTG的Bugzilla插件被改写为同步服务</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Mon, 15 Sep 2014 04:48:20 +0800</pubDate>
        <link>http://tkdchen.me/blog/2014/09/15/bugzilla-is-reimplemented-to-a-synchronization-service.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2014/09/15/bugzilla-is-reimplemented-to-a-synchronization-service.html</guid>
        <comments>http://tkdchen.me/blog/2014/09/15/bugzilla-is-reimplemented-to-a-synchronization-service.html#comments</comments>
        <description><![CDATA[ <p>最近，完成了对Bugzilla插件的重写，重新实现为GTG的同步服务（Synchronization Service）。不得而知是何原因需要做这个转换。
您可以从<a href="https://bugs.launchpad.net/gtg/+bug/494967">Bug 494967</a>略之一二。</p>

<p>原始的插件实现提供了基本的Bug信息同步功能。在用户输入一个Bug链接后，Bugzilla插件会得到GTG的通知，根据URL中提供的远程Bugzilla服务的信息，
与之通信读取Bug信息并替换任务的主题和内容。同时，会把Bug的Component作为任务的标签。除了这些基本功能外，在我看来，有一点不足非常明显，即可配置程度不高。
它体现在几个方面。</p>

<ul>
<li><p>所支持的Bugzilla服务是不可配置的。这些服务是写死在代码里的，用户对它们做任何的控制。例如，用户无法添加一个GTG尚未知晓的Bugzilla服务。</p></li>
<li><p>标签同步的来源是不可配置的。标签的来源也是在代码里写死。用户没有任何选择的权力。Priority、Severity等Bug信息都是可以作为标签的很好的选项。
如果有用户需要使用它们作为标签，则必须代码才能够实现。另外，如果用户想指定额外的名称作为标签，同样也只能指望GTG的开发者。显然这不够理想。</p></li>
</ul>


<p>在开始重新实现为同步服务之前，我希望能保持原始的功能不做任何改动，以便尽可能保持用户的原有的用户体验。此外，既然是重新实现，
这也是个很好的重新考虑同步功能的好机会，借机改进Bugzilla同步服务，修改掉已知的一些问题。下面的几点是重写过程中所保持的和做出的改进。</p>

<ul>
<li><p>保持Bug信息同步的原始行为不变。不改变已有的用户体验。</p></li>
<li><p>标签同步的来源可配置。可指定哪些Bug信息可作为标签，以及可以输入自定义的标签名称。目前还不支持用户可以指定任意的Bug属性作为标签。
尽管各个Bugzilla服务都是基于相同Bugzilla项目，但不同的开源项目有其各自独特的管理需求，使得Bug属性也不尽相同。即便如此，它们也是有相同的部分，
例如Priority、Severity、Component和Status等。这些属性对于开发者来说，都是有意义的。因此，我决定在目前的版本中，首先支持这些共有的、
且极具实际用途的Bug属性。这样也能够降低在Bugzilla服务之间处理不同的Bug属性差异所带来的复杂度。</p></li>
<li><p>提供默认支持的Bugzilla服务列表，也允许用户增、删、改。在使用中，删除和编辑的可能性是不大的。显然，没有哪个项目会经常变动自己Bugzilla服务的域名。
但也显然的是，默认的列表不能穷举所有已经存在的Bugzilla服务。增的操作对于某些用户来说就显得很有必要了。</p></li>
<li><p>允许将Bug的第一个Comment作为任务的内容添加到任务中。这是一个很有用的选项。从我个人的角度来看，这个功能非常的有价值，
应该作为同步的一个步骤提供给用户而不是作为选项。为了保持原有的插件的同步行为不变，只能将此作为选项提供，且默认不勾选。</p></li>
<li><p>更友好的信息提示机制。同步Bug信息的过程中，可能会遇到各种各样的意外情况。提示信息包括这些意外情况中的多数应该让用户知道的内容。在插件实现中，
以及最初的同步服务实现中，我采取系统的通知机制（通过pynotify提供）。实践证明，尽管这种方式解决了问题，在GNOME和KDE以及其他常见的桌面环境中能够
以相对友好的方式显示提示消息，但似乎与GTG有些脱节。GTG本身提供了内置的消息提示机制。集成的通知机制，交互方便，能够将用户的注意力集中在GTG上发生的
所有的操作，这样有助于用户提高效率。Bugzilla同步服务也使用了此机制向用户推送必要的消息。</p></li>
</ul>


<p>目前，已经完成了第一个目标。原始的同步的功能能够正常工作。Bugzilla同步服务的配置对话框如下图1所示。</p>

<p><img src="/images/blog/gtg-bugzilla-sync-service-config-dialog.png" alt="Bugzilla Synchronization Service Config Dialog" /></p>

<p>同步结果入下图2所示。</p>

<p><img src="/images/blog/gtg-bugzilla-sync-demo.png" alt="Bugzilla Synchronization Demo" /></p>

<p>从上图中能看到，已经有两个两个任务获得了对应的Bug的信息。另外两个没有同步成功，其中一个原因被显示在了对话框中央的提示区域中。</p>

<p>您可以从这里获得代码尝鲜，<a href="https://github.com/getting-things-gnome/gtg/pull/55">https://github.com/getting-things-gnome/gtg/pull/55</a></p>

<p>Bugzilla同步服务的配置功能还没有完成。这是下一步要做的主要工作。不得不提的是，同步服务的配置对话框限制了开发者向其添加自定义窗口部件的能力。
GTG采取了声明式的实现方式。它内置了有限的几种对应到不同类型的配置参数的窗口部件。配置区域是自动生成的。不爽的是，它没有暴露必要的接口以允许
开发者添加自定义的内容。历经近一段时间的摸索，没有得到任何答案。GTG的开发者邮件列表也没有反馈。所以，在上图1中，您没有看到默认提供的Bugzilla服务的列表。
接下来，这是首要解决的问题。</p>
 ]]></description>
      </item>
      
      <item>
        <title>在VIM中常用的正则表达式</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Wed, 20 Aug 2014 23:25:20 +0800</pubDate>
        <link>http://tkdchen.me/blog/2014/08/20/frequently-used-vim-regex.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2014/08/20/frequently-used-vim-regex.html</guid>
        <comments>http://tkdchen.me/blog/2014/08/20/frequently-used-vim-regex.html#comments</comments>
        <description><![CDATA[ 

<div class="highlight"><pre><code class="language-vim" data-lang="vim"><span class="c">&quot; Tip 1: Add extra characters before the first character of each line</span>
<span class="k">s</span><span class="sr">/^\(.\)/</span><span class="p">-</span> \<span class="m">1</span>/

<span class="c">&quot; Tip 1.1: Comment lines of code</span>
<span class="k">s</span><span class="sr">/^\(.\)/</span># \<span class="m">1</span>/

<span class="c">&quot; Tip 1.2: Comment lines by adding # before the first letter</span>
<span class="k">s</span><span class="sr">/^\( \+\)\(.\)/</span>\<span class="m">1</span># \<span class="m">2</span>/

<span class="c">&quot; Tip 2: remove all trailing white space characters</span>
<span class="k">s</span><span class="sr">/\s\+$/</span>/

<span class="c">&quot; Tip 3: search class and method definition</span>
^\<span class="p">(</span>class\<span class="p">|</span> *<span class="nb">def</span>\<span class="p">)</span> \<span class="p">+</span>\<span class="k">w</span>\<span class="p">+</span></code></pre></div>



 ]]></description>
      </item>
      
      <item>
        <title>如何在Fedora中运行BOINC</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Tue, 19 Aug 2014 17:00:10 +0800</pubDate>
        <link>http://tkdchen.me/blog/2014/08/19/how-to-run-boinc-in-fedora.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2014/08/19/how-to-run-boinc-in-fedora.html</guid>
        <comments>http://tkdchen.me/blog/2014/08/19/how-to-run-boinc-in-fedora.html#comments</comments>
        <description><![CDATA[ <p>在<a href="http://fedoraproject.org/">Fedora</a>中运行<a href="http://boinc.berkeley.edu/">BOINC</a>有两个方法，可以从官方网站下载二进制安装包，然后在本地安装。</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sh boinc_7.2.42_x86_64-pc-linux-gnu.sh</code></pre></div>


<p>截至写这些文字的时候，<code>7.2.42</code>是最新的版本。有一点提示的是，安装过程会在执行此条命令的目录中创建
BOINC子目录，所有必需的文件都将安装在这个目录中。</p>

<p>然而，这第一种方法，我没有成功。在启动<code>boincmgr</code>总是出现程序库错误，无法运行。此时，就需要另外
一种，BOINC的Wiki中也记载的方式。即使用特定的Linux发行版本的包管理器安装。</p>

<p>对于Fedora，使用下面的命令。</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sudo yum install boinc-client boinc-manager</code></pre></div>


<p>BOINC管理器允许管理多台计算机上的boinc计算进程。首次启动管理器后，需要手动地连接到某一台计算机上。步骤如下，</p>

<ol>
<li>通过菜单进入计算机选择对话框 <code>Advanced -&gt; Select Computer</code></li>
<li>在<code>Host name</code>中，输入<code>127.0.0.1</code>。</li>
<li>以root用户身份打开文件<code>/var/lib/boinc/gui_rpc_auth.cfg</code>，将其中地完整内容拷贝到<code>Password</code>。</li>
</ol>


<p>如果已经添加了至少一个分布式计算项目，你将会看到类似如下图所示的界面。</p>

<p><img src="/images/blog/boinc-sample.png" alt="BOINC Manager Sample" /></p>
 ]]></description>
      </item>
      
      <item>
        <title>参与SETI@Home项目已经14年了</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Sun, 17 Aug 2014 18:20:10 +0800</pubDate>
        <link>http://tkdchen.me/blog/2014/08/17/member-of-setiathome-14-years.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2014/08/17/member-of-setiathome-14-years.html</guid>
        <comments>http://tkdchen.me/blog/2014/08/17/member-of-setiathome-14-years.html#comments</comments>
        <description><![CDATA[ <p>一晃，参与<a href="http://setiathome.berkeley.edu/">SETI@Home</a>项目已经14年多了。SETI@Home项目首先提出并实践了利用全球空闲的CPU资源实现
全球范围内的分布式计算思想。在这过去的14年中，逐渐演变成了<a href="http://boinc.berkeley.edu/">BOINC</a>通用的分布式计算平台。伴随着
SETI@Home项目的蓬勃发展，众多的分布式计算项目孕育而生，包含各个领域的研究课题。我也参与了几个
非常喜欢和感兴趣的项目。下面这张表是对过去的贡献的一个总结。</p>

<table width="100%">
<tbody>
    <tr>
        <th>Project</th>
        <th>Total credit</th>
        <th>Average credit</th>
        <th>Since</th>
    </tr>
    <tr>
        <td>World Community Grid</td>
        <td align="right">64,783</td>
        <td align="right">0</td>
        <td align="right">15 Nov 2005</td>
        </tr>
    <tr>
        <td><a href="http://casathome.ihep.ac.cn/">CAS@home</a></td>
        <td align="right">1,486</td>
        <td align="right">0</td>
        <td align="right">23 Mar 2011</td>
        </tr>
    <tr>
        <td><a href="http://boinc.bakerlab.org/rosetta/">Rosetta@home</a></td>
        <td align="right">11,941</td>
        <td align="right">0</td>
        <td align="right">29 May 2006</td>
        </tr>
    <tr>
        <td><a href="http://www.climateprediction.net/">climateprediction.net</a></td>
        <td align="right">35,409</td>
        <td align="right">0</td>
        <td align="right">15 Nov 2005</td>
        </tr>
    <tr>
        <td><a href="http://einstein.phys.uwm.edu/">Einstein@Home</a></td>
        <td align="right">170,252</td>
        <td align="right">0</td>
        <td align="right">25 Feb 2005</td>
        </tr>
    <tr>
        <td><a href="http://setiathome.berkeley.edu/">SETI@home</a></td>
        <td align="right">788,562</td>
        <td align="right">0</td>
        <td align="right">3 Aug 2000</td>
        </tr>
    </tbody>
</table>



 ]]></description>
      </item>
      
      <item>
        <title>Concurrency和Parallelism</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Sat, 05 Apr 2014 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2014/04/05/concurrency-parallelism.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2014/04/05/concurrency-parallelism.html</guid>
        <comments>http://tkdchen.me/blog/2014/04/05/concurrency-parallelism.html#comments</comments>
        <description><![CDATA[ <p>这两天特别趁着假期再次学习一下并发（Concurrency）和并行（Parallelism）。学习的主要内容是这两
者之间的区别。很多人，包括我自己在内，对并发和并行的区别了解的并不是很清晰和准确。需要说明的一点是，
这篇短文不是阐述并发和并行的理论文章。</p>

<p>Concurrency完全不同于Parallelism。计算机系统本身就是一个Concurrency模型。各种中断充斥在计算机系统的运行过程中，这是一个典型的基于事件的处理模型。在一个CPU上并行地执行多个任务。人的大脑是一个Concurrency模型。</p>

<p>像SETI@home项目，把一个巨大的任务分成一系列小的可以被独立的在世界各地的个人计算机上运算的数据包。这个模型是Parallelism。特点是，</p>

<ul>
<li>它需要多个独立存在的运算处理单元（每一台个人计算机）</li>
<li>计算可以在每一个运算处理单元中重复的计算并得到相同的结果</li>
<li>每一个运算单元之间不需要任何形式的通信以完成运算</li>
<li>每一个运算单元都有自己的完成运算任务的环境（或者叫上下文环境）</li>
</ul>


<p>学习资料</p>

<ul>
<li><a href="http://www.haskell.org/haskellwiki/Parallelism_vs._Concurrency">http://www.haskell.org/haskellwiki/Parallelism_vs._Concurrency</a></li>
<li><a href="http://stackoverflow.com/a/15596277/968262">http://stackoverflow.com/a/15596277/968262</a></li>
<li><a href="http://blog.golang.org/concurrency-is-not-parallelism">http://blog.golang.org/concurrency-is-not-parallelism</a></li>
<li><a href="http://en.wikipedia.org/wiki/Concurrent_computing">http://en.wikipedia.org/wiki/Concurrent_computing</a></li>
</ul>

 ]]></description>
      </item>
      
      <item>
        <title>这个函数定义会让你抓狂吗？</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Wed, 04 Sep 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/09/04/does-this-make-you-crazy.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/09/04/does-this-make-you-crazy.html</guid>
        <comments>http://tkdchen.me/blog/2013/09/04/does-this-make-you-crazy.html#comments</comments>
        <description><![CDATA[ <p>这个函数定义是从<a href="https://github.com/openSUSE/libsolv">libsolv</a>中看到的。当你看到它的时候，会有中抓狂的感觉吗？</p>

<div class="highlight"><pre><code class="language-c--" data-lang="c++"><span class="kt">char</span><span class="o">*</span>
<span class="nf">pool_tmpjoin</span><span class="p">(</span><span class="n">Pool</span> <span class="o">*</span><span class="n">pool</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str1</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str2</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">str3</span><span class="p">)</span>
<span class="p">{</span>
<span class="p">}</span></code></pre></div>


<p>str[1..3]这三个参数是干什么用的，传什么参数，函数连个注释都没有。我去，不得不从代码里面找答案。</p>
 ]]></description>
      </item>
      
      <item>
        <title>在Mac OS里安装QT</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Tue, 27 Aug 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/08/27/installing-qt-in-macos.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/08/27/installing-qt-in-macos.html</guid>
        <comments>http://tkdchen.me/blog/2013/08/27/installing-qt-in-macos.html#comments</comments>
        <description><![CDATA[ <p>这是很简单的一篇记录文章。偶然间在reddit中看到了一个回复，提到QT的跨平台特性优于GTK+。由此忽然间想到，前段时间在Mac上编译安装GTK+是多么麻烦的一件事情。虽然不复杂，但还是费了不少周折。于是，搜索到QT官方文档，详细的描述了如何在Mac中安装QT。有点小兴奋。凡事怕比较。QT的优势又一次显现出来。无外乎两个步骤，而且都是常规的UNIX软件包安装方法。第一步，<code>./configure &amp;&amp; make &amp;&amp; make install</code>。第二步，设置环境变量。</p>

<p>详细的内容您自个儿瞧吧，:) 《<a href="http://qt-project.org/doc/qt-4.8/install-mac.html">Installing Qt for Mac OS</a>》</p>
 ]]></description>
      </item>
      
      <item>
        <title>我的Python代码或许在多数时候都得不了100分</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Mon, 26 Aug 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/08/26/my-python-code-might-not-be-scored-10-10-by-pylint.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/08/26/my-python-code-might-not-be-scored-10-10-by-pylint.html</guid>
        <comments>http://tkdchen.me/blog/2013/08/26/my-python-code-might-not-be-scored-10-10-by-pylint.html#comments</comments>
        <description><![CDATA[ <p>在Python社区中，开发人员能够使用<a href="https://pypi.python.org/pypi/pep8">pep8</a>，<a href="https://pypi.python.org/pypi/pyflakes">pyflakes</a>和<a href="http://www.pylint.org">pylint</a>来检查自己的代码是否符合<a href="http://www.python.org/dev/peps/pep-0008/">PEP8所描述的指导规范</a>，同时还能够检查出来哪些变量是我们定义了，但是没有用到的，等等。在这些工具中，pylint无非是（似乎是）最受社区推崇的一个。OpenStack使用它做代码检查，Sonar除了支持自己默认的检查规则外，也就只支持pylint了。</p>

<p>话说pylint功能强大，在默认配置的控制下，它检查Python代码的方方面面。最后得到的评分也许会让自己大跌眼镜。我第一次用的时候就是这个感受。难道我写代码的水平这么差劲吗？！:)</p>

<p>pylint只是一个工具而已。不要让它束缚了我们的思想，我们写代码不是为了在pylint中得到高分，爽一把。用pylint前稍微考虑一下：</p>

<p>第一，我们需要一个什么样的代码风格。</p>

<p>第二，让pylint控制到什么程度。</p>

<p>第三，使用pylint为了什么。</p>

<p>看这些文字的你肯定还有你自己更富有创意和特点的点子。不管怎样，我会首选pep8和pyflakes。在项目需要，不得不用pylint的时候，才会使用它。同时遵循的原则是，不要为了得到pylint的赞赏而去写代码。例如，绝对不会在代码里写<code>program</code>。在基于django的项目中，也不会为了避免检查<code>request</code>而额外的付出什么。</p>

<p>或许我的Python代码在很长时间内，都不会得到pylint的满分成绩。给自己或者项目设定一个可接受的最低分。把以往的经验值作为依据，来确定这个基准值。或者干脆就设定一个你心目中期望打到的一个值。为了确保较高的代码质量标准，较高的最低分是有意义的。</p>

<p>对于大多数的项目和简单的代码，9分是我能够接受的最低分。我会尽可能地确保我的Python代码风格地一致性，使用诸如pylint等工具帮我找出改进之处。</p>
 ]]></description>
      </item>
      
      <item>
        <title>用GnuCash管理个人财务数据</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Sat, 24 Aug 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/08/24/using-gnucash-to-manage-personal-finance.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/08/24/using-gnucash-to-manage-personal-finance.html</guid>
        <comments>http://tkdchen.me/blog/2013/08/24/using-gnucash-to-manage-personal-finance.html#comments</comments>
        <description><![CDATA[ <p>生活不易，工作不易，为了生活赚钱更不易。在日常的生活中，有必要对我们的收入和支出有比较清晰的跟踪。个中目的，相信每个人都有自己的打算。收支平衡很重要。对于我来说，对自己财务数据的管理的目的，无非就是在有限的收入中，能够对其有所规划，在保持一定生活水平的同时，也能够留出适当的一部分做投资、做保险等等，为未来的生活做准备。</p>

<p>国外的金融危机让很多外国人都已经开始重新审视自己的消费观。有计划的，节省不必要的开支成为他们的财务管理过程中很重要的一部分。从<a href="http://lifehacker.com">lifehacker</a>站点的有关财务管理的文章中能看到某些端倪。对此我必须要做一点声明，我没有在西方社会生活的经历，并不是非常了解西方社会普遍的消费观念。我是通过新闻媒体的报道，以及阅读一些文章后了解到的信息。某些人在某种程度上所崇拜和学习的，西方式的超前的、看似很前卫的消费方式，其实并不是认为的那样。他们也很精打细算。</p>

<p>管理个人财务，首先要有个地方记录每一笔种类的开支，其次最好还能够做一些统计，最好好用很重。虽然记录数据要花时间，生活中多了一个必须完成的任务。但是，我可不想它成为一个巨大的负担，不要为了记录一两条简单的花费而大费周折。</p>

<p>有很多种方法可以记录这些个人财务数据。电子表格最方便。要不就找一个像模像样的软件。两者都可以，就看个人喜好了。如果你对电子表格的操作非常熟悉，同时你又对数据管理、统计有一定的知识，用电子表格姑且还算可以。但怎么都比上一个功能齐全的软件。我推荐GnuCash。这不是广告。它真的很好用。</p>

<p>用<a href="http://www.gnucash.org/">GnuCash</a>记帐遵循<a href="http://cn.bing.com/search?q=%E5%A4%8D%E5%BC%8F%E8%AE%B0%E5%B8%90%E6%B3%95&amp;FORM=HDRSC1">复式记帐法</a>（<a href="http://en.wikipedia.org/wiki/Double_entry">Double Entry</a>）。简单来说，任何一笔资金都有一个明确地流向。从何处来，之后又从哪一笔支出流出，最终达到收支平衡。在最简单的记帐过程中，有两个重要的概念需要花点时间理解一下。这样能够更清楚地理解如何使用GnuCash来完成最基本的财务管理任务。</p>

<p>首先是帐目（Account），每一条消费记录或者收入记录都列在帐目中。它与生活中常用地账本基本上是一样。每一行能记录这笔钱话在什么地方了，什么时间花的，花了多少等等。每当一笔资金录入进去之后，当前余额会被立即计算出来。GnuCash内置了几种特定类型的帐目，分别用于管理不同的收支情况。它们是资产帐目（Assets），债务帐目（Liabilities），资产净值帐目（Equity），收入帐目（Income）和支出帐目（Expenses）。GnuCash的文档详细解释了这每一种帐目的用途。这里就不再多说。顺便提一句，可以利用债务帐目管理信用卡。</p>

<p>其次是资金转移（Transaction）。顾名思义，一条资金转移记录明确的给出了一笔钱流向了哪里。如何记录一笔资金的动向呢？实际上，在此前的帐目部分中已经给出了。在帐目中出现的每一条帐目记录，就是一笔资金转移。</p>

<p>对于信用卡的管理，我还想多说一些。这是我刚开始使用GnuCash的时候，特别迷惑的地方。主要原因是，我没有把信用卡消费行为的本质搞清楚。信用卡消费不同于使用借记卡刷卡消费，二者完全不同。前者是一种个人向银行的借代行为，而后者则是直接从银行账户中减掉消费的金额。正因为如此，在记录每一笔信用卡消费的时候，对应的信用卡帐目的余额是不断增加的。每当信用卡还款日到来，在恰好还清所有欠款之后，余额为零，这是我想要的。</p>

<p>以上只是介绍了GnuCash众多功能中的冰山一角。主要是我也才逐渐地把这些基本的功能熟练使用。GnuCash是免费软件。任何人不用支付任何费用就能够无限制地使用其提供的所有功能。不管选择什么样的方式做个人财务的管理，持之以恒是王道。这样数据才能够更加真实的反映你的收支情况。做这些不就是为了自己嘛。你说是吧。:)</p>
 ]]></description>
      </item>
      
      <item>
        <title>如何查询个人信用记录</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Fri, 09 Aug 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/08/09/how-to-request-personal-credit-report.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/08/09/how-to-request-personal-credit-report.html</guid>
        <comments>http://tkdchen.me/blog/2013/08/09/how-to-request-personal-credit-report.html#comments</comments>
        <description><![CDATA[ <p>查询个人信用记录非常方便。这篇文章以我个人查询本人信用记录的经历为参照，给你提供一个快捷的参考。如果你是查询自己的信用记录，那么按照下面的步骤即可轻松完成。</p>

<ul>
<li>仔细阅读申请流程。到<a href="http://www.pbccrc.org.cn/">中国人民银行征信中心</a>网站，仔细阅读<a href="http://www.pbccrc.org.cn/kefuzhongxin_301.html">本人查询信用报告流程</a>。</li>
<li>下载个人信用报告本人查询申请表。在本人查询信用报告流程的页面中，下载<a href="http://file.pbccrc.org.cn/files/%E4%B8%AA%E4%BA%BA%E4%BF%A1%E7%94%A8%E6%8A%A5%E5%91%8A%E6%9C%AC%E4%BA%BA%E6%9F%A5%E8%AF%A2%E7%94%B3%E8%AF%B7%E8%A1%A8.doc">个人信用报告本人查询申请表</a>。填好里面相关的所有信息。别忘了签字。</li>
<li>去中国人民银行营业管理部办理查询。办理查询需要携带本人的身份证和身份证的正反面复印件。如果你填写了那个申请表，也一并带着。地址在网站首页的顶部已经给出。坐地铁的话，6号线在车公庄西站出，沿展览馆路往南，过两个有红绿灯的路口就能到了。就在路边上，一眼就能看到。</li>
</ul>


<p>办理的流程非常简单。到那凭身份证、身份证复印件和申请表领号。然后等着叫号，到指定的窗口办理即可。非常快，核对信息后，信用报告即可就能打印出来。</p>

<p>有几点提示。首先，办理查询业务的人很多，尽量早去。其次，能够提前复印身份证和填写申请表的话，就事先把这两件东西都准备好。到那直接拿号，节省时间。</p>

<p>门口咨询台的服务人员态度很好，非常耐心地解答各种问题。祝你顺利。</p>
 ]]></description>
      </item>
      
      <item>
        <title>如何在GTG插件中读取和存储用户偏好数据</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Sat, 22 Jun 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/06/22/how-to-load-and-store-user-preference-in-plugin.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/06/22/how-to-load-and-store-user-preference-in-plugin.html</guid>
        <comments>http://tkdchen.me/blog/2013/06/22/how-to-load-and-store-user-preference-in-plugin.html#comments</comments>
        <description><![CDATA[ <p>每一个插件都可以管理自己的用户偏好数据。这些数据存储在插件自己的配置目录中，彼此独立，互不影响。在GTG中，用户偏好数据被存储到一个字典对象中，使用pickel将其序列化到指定的文件中，此文件位于插件自己的专属目录中，其名称由开发者决定，并通过参数传递给用户偏好数据操作接口。插件API提供了两个方法用于读取和存储用户偏好数据，它们分别是<code>load_configuration_object</code> 和<code>save_configuration_object</code>，接口定义如下。</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">load_configuration_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">plugin_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span>
                              <span class="n">basedir</span><span class="o">=</span><span class="n">xdg_config_home</span><span class="p">,</span>
                              <span class="n">default_values</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sd">&#39;&#39;&#39;Load preference&#39;&#39;&#39;</span>

<span class="k">def</span> <span class="nf">save_configuration_object</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">plugin_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span>
                              <span class="n">basedir</span><span class="o">=</span><span class="n">xdg_config_home</span><span class="p">):</span>
    <span class="sd">&#39;&#39;&#39;Store preference&#39;&#39;&#39;</span></code></pre></div>


<p>这两个接口均接受插件名称（plugin_name）和文件名（filename）两个参数。GTG不提供默认的文件名。推荐使用名称<code>preference</code>。存储用户偏好数据的字典对象传递给参数<code>item</code>。</p>

<p>接口非常简单，写到这就可以结束了。Notification Area插件实现提供了很好的代码参考。</p>
 ]]></description>
      </item>
      
      <item>
        <title>rejectUnauthorized的默认值变了</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Wed, 19 Jun 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/06/19/rejectUnauthorized-changed.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/06/19/rejectUnauthorized-changed.html</guid>
        <comments>http://tkdchen.me/blog/2013/06/19/rejectUnauthorized-changed.html#comments</comments>
        <description><![CDATA[ <p>这个变化发生在0.9.2版本中。下面的代码片段摘录自<a href="https://github.com/joyent/node/blob/v0.9.2-release/lib/tls.js">tls.js</a></p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">defaults</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">rejectUnauthorized</span><span class="o">:</span> <span class="s1">&#39;0&#39;</span> <span class="o">!==</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_TLS_REJECT_UNAUTHORIZED</span>
<span class="p">};</span></code></pre></div>


<p>从与<a href="https://github.com/joyent/node/blob/v0.9.1-release/lib/tls.js">0.9.1</a>版本的对比来看，在新版本中，允许使用环境变量来控制参数<code>rejectUnauthorized</code>。上面的代码则使得默认值从<code>false</code>变更为<code>true</code>。在tls模块的文档中记录了这个变化，遗憾的是Node的Changelog则没有记录。</p>

<p>为了确保代码能够在Node的各个版本间保持兼容性，在<code>options</code>参数中明确地给<code>rejectUnauthorized</code>设置所期望的值，而不使用默认值。</p>
 ]]></description>
      </item>
      
      <item>
        <title>及时释放Backbone对象占用的资源</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Sun, 09 Jun 2013 18:30:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/06/09/release-resource-from-backbone-object.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/06/09/release-resource-from-backbone-object.html</guid>
        <comments>http://tkdchen.me/blog/2013/06/09/release-resource-from-backbone-object.html#comments</comments>
        <description><![CDATA[ <p><a href="http://backbonejs.org/">Backbone</a>对象？是的，此文中提到的Backbone对象指的就是View，Model和Collection。他们占用什么资源呢？在一个使用了Backbone、<a href="http://socket.io/">socket.io</a>和<a href="http://alogicalparadox.com/backbone.iobind/">ioBind</a>的项目中，会在DOM层、Model和Collection，以及socket三个层面注册大量的事件处理函数实现用户功能。这些事件监听就是最大的一个资源占用。不仅仅消耗内存，还会导致在反复创建同一个Model或者Collection的对象的情况下事件响应的泛滥。因此，在什么时候释放这些资源，以及如何释放非常值得关注。为了回答这两个问题，先通过代码来看看典型的应用方式。</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">BaseModel</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">idAttribute</span><span class="o">:</span> <span class="s2">&quot;_id&quot;</span><span class="p">,</span>
  <span class="nx">socket</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">socket</span><span class="p">,</span>
  <span class="nx">urlRoot</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>

  <span class="nx">url</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">urlRoot</span> <span class="o">+</span> <span class="s2">&quot;/&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span>
  <span class="p">},</span>

  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;modelCleanup&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">modelCleanup</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ioBind</span><span class="p">(</span><span class="s1">&#39;update&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">serverChange</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ioBind</span><span class="p">(</span><span class="s1">&#39;delete&#39;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">serverDelete</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
  <span class="p">},</span>

  <span class="nx">serverChange</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{}</span>
  <span class="nx">serverDelete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{}</span>
  <span class="nx">modelCleanup</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">Checklist</span> <span class="o">=</span> <span class="nx">BaseModel</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">urlRoot</span><span class="o">:</span> <span class="s2">&quot;checklist&quot;</span><span class="p">,</span>

  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">attributes</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">itemCollection</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChecklistItemCollection</span><span class="p">;</span>
    <span class="nx">BaseModel</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">ChecklistItem</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">urlRoot</span><span class="o">:</span> <span class="s2">&quot;checklistitem&quot;</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">BaseCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
  <span class="nx">model</span><span class="o">:</span> <span class="kc">undefined</span><span class="p">,</span>
  <span class="nx">socket</span><span class="o">:</span> <span class="nb">window</span><span class="p">.</span><span class="nx">socket</span><span class="p">,</span>

  <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">models</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_</span><span class="p">.</span><span class="nx">bindAll</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="s2">&quot;serverCreate&quot;</span><span class="p">);</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">ioBind</span><span class="p">(</span><span class="s2">&quot;create&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">socket</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">serverCreate</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
  <span class="p">},</span>

  <span class="nx">serverCreate</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{}</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">ChecklistCollection</span> <span class="o">=</span> <span class="nx">BaseCollection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/checklist&quot;</span><span class="p">,</span>
  <span class="nx">model</span><span class="o">:</span> <span class="nx">Checklist</span>
<span class="p">});</span>

<span class="kd">var</span> <span class="nx">ChecklistItemCollection</span> <span class="o">=</span> <span class="nx">BaseCollection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
  <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;/checklistitem&quot;</span><span class="p">,</span>
  <span class="nx">model</span><span class="o">:</span> <span class="nx">ChecklistItem</span>
<span class="p">});</span></code></pre></div>


<p>上面的代码定义了一个用于Checklist管理的模型。<code>Checklist</code>包含一个<code>ChecklistIteCollection</code>的实例来描述一对多的关系。使用ioBind来管理前端和后端之间的socket通信，以实现特定对象的CRUD操作。从代码中我们可以看到，只要创建了其中的任何一个对象，<code>this.ioBind</code>方法调用都将会导致响应socket事件的处理函数被注册。接下来是View的定义。</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="kd">var</span> <span class="nx">ChecklistView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="lineno"> 2</span>   <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno"> 3</span>     <span class="k">this</span><span class="p">.</span><span class="nx">itemViews</span> <span class="o">=</span> <span class="p">[];</span>
<span class="lineno"> 4</span>     <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
<span class="lineno"> 5</span>     <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChecklistItemAdded</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
<span class="lineno"> 6</span>   <span class="p">},</span>
<span class="lineno"> 7</span> 
<span class="lineno"> 8</span>   <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{},</span>
<span class="lineno"> 9</span> 
<span class="lineno">10</span>   <span class="nx">onChecklistItemAdded</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">checklistItem</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">11</span>     <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChecklistItemView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">checklistItem</span><span class="p">});</span>
<span class="lineno">12</span>     <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
<span class="lineno">13</span>     <span class="k">this</span><span class="p">.</span><span class="nx">itemViews</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
<span class="lineno">14</span>   <span class="p">}</span>
<span class="lineno">15</span> <span class="p">});</span>
<span class="lineno">16</span> 
<span class="lineno">17</span> <span class="kd">var</span> <span class="nx">ChecklistsView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="lineno">18</span>   <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno">19</span>     <span class="k">this</span><span class="p">.</span><span class="nx">checklistViews</span> <span class="o">=</span> <span class="p">[];</span>
<span class="lineno">20</span>     <span class="k">this</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;add&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">onChecklistAdded</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
<span class="lineno">21</span>   <span class="p">},</span>
<span class="lineno">22</span> 
<span class="lineno">23</span>   <span class="nx">onChecklistAdded</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">checklist</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">24</span>     <span class="kd">var</span> <span class="nx">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChecklistView</span><span class="p">({</span><span class="nx">model</span><span class="o">:</span> <span class="nx">checklist</span><span class="p">});</span>
<span class="lineno">25</span>     <span class="k">this</span><span class="p">.</span><span class="nx">$el</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">view</span><span class="p">.</span><span class="nx">render</span><span class="p">().</span><span class="nx">el</span><span class="p">);</span>
<span class="lineno">26</span>     <span class="k">this</span><span class="p">.</span><span class="nx">checklistViews</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">view</span><span class="p">);</span>
<span class="lineno">27</span>   <span class="p">}</span>
<span class="lineno">28</span> <span class="p">});</span>
<span class="lineno">29</span> 
<span class="lineno">30</span> <span class="kd">var</span> <span class="nx">ChecklistItemView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="lineno">31</span>   <span class="nx">events</span><span class="o">:</span> <span class="p">{</span>
<span class="lineno">32</span>     <span class="s2">&quot;click .js-remove-item&quot;</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{}</span>
<span class="lineno">33</span>   <span class="p">},</span>
<span class="lineno">34</span> 
<span class="lineno">35</span>   <span class="nx">initialize</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno">36</span>     <span class="k">this</span><span class="p">.</span><span class="nx">model</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s2">&quot;change&quot;</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="p">,</span> <span class="k">this</span><span class="p">);</span>
<span class="lineno">37</span>   <span class="p">},</span>
<span class="lineno">38</span> 
<span class="lineno">39</span>   <span class="nx">render</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{}</span>
<span class="lineno">40</span> <span class="p">});</span>
<span class="lineno">41</span> 
<span class="lineno">42</span> <span class="kd">var</span> <span class="nx">checklistManageView</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">ChecklistsView</span><span class="p">({</span>
<span class="lineno">43</span>   <span class="nx">el</span><span class="o">:</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.some-selector&quot;</span><span class="p">),</span>
<span class="lineno">44</span>   <span class="nx">collection</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Checklists</span>
<span class="lineno">45</span> <span class="p">});</span></code></pre></div>


<p>到此，管理Checklist的所有前端代码已经齐全。由于此文着重于前端的处理，所以没有给出后端代码实现的参考。如果你对socket.io足够的了解，想必你会知道有很多种技术能够用来实现后端的功能。Node加socket.io Server是其中之一。此外，参照socket.io实现的其它<a href="https://github.com/learnboost/socket.io/wiki">解决方案</a>也非常丰富。好了，言归正传。让我们回过头来分析一下View层代码都干了什么。</p>

<p>这几个View足够简单，其中每一个的代码结构都很中规中矩，无非干了这么几件事。首先，在初始化阶段创建必要的内部模型对象。其次，在那些模型对象之上监听感兴趣的事件，完成页面上某个区域的用户功能的实现。最后，通过events对象中的声明，在View管理的DOM中绑定DOM级别的事件处理函数。所有的这些是使用Backbone实现前端页面用户功能所必须要做的最小的集合。初始化阶段介绍完了。那么，在一个View的生命结束的时候会发生什么事情呢？绑定事件，创建对象等等这些可都是要占用资源的，另外你肯定也不期望一个View对象不用了，它还在持续的响应事件，造成重复的不必要的事件处理。遗憾的是，Backbone本身并没有提供一种机制或者规范来强制或者提示开发人员应该在View对象的生命即将结束的时候改做写什么。这就造成Backbone使用经验不足的开发人员，经常会忽略这一点。当发现问题的时候，用拐弯抹角的方法去避免不期望的事情的发生。</p>

<p>当然了，Backbone提供了所有必要的函数调用来清理和回收资源，怎么用好这些就需要我们细心思考了。在这里，给出如下解决方案。两点。一是，给View添加close方法。二是，给Model和Collection添加dispose方法。</p>

<p>View的close方法只限于在DOM中释放资源，例如当前View对象中的事件监听。为了告诉所有子View对象它们该关闭了，直接调用它们的close方法即可。</p>

<p>Model和Collection的dispose方法则只关注自身的资源释放。即关闭所有在自身上建立的事件监听，以及通过ioBind或者其他方式建立的socket事件监听。示例代码如下。</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="lineno"> 1</span> <span class="kd">var</span> <span class="nx">BaseView</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">View</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="lineno"> 2</span>   <span class="nx">close</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno"> 3</span>     <span class="k">this</span><span class="p">.</span><span class="nx">remove</span><span class="p">();</span>
<span class="lineno"> 4</span>   <span class="p">}</span>
<span class="lineno"> 5</span> <span class="p">});</span>
<span class="lineno"> 6</span> 
<span class="lineno"> 7</span> <span class="kd">var</span> <span class="nx">BaseMode</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="lineno"> 8</span>   <span class="nx">dispose</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno"> 9</span>     <span class="k">this</span><span class="p">.</span><span class="nx">off</span><span class="p">();</span>
<span class="lineno">10</span>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">noIoBind</span><span class="p">)</span>
<span class="lineno">11</span>       <span class="k">this</span><span class="p">.</span><span class="nx">ioUnbindAll</span><span class="p">();</span>
<span class="lineno">12</span>     <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="lineno">13</span>   <span class="p">}</span>
<span class="lineno">14</span> <span class="p">});</span>
<span class="lineno">15</span> 
<span class="lineno">16</span> <span class="kd">var</span> <span class="nx">BaseCollection</span> <span class="o">=</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Collection</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
<span class="lineno">17</span>   <span class="nx">dispose</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="lineno">18</span>     <span class="k">this</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">item</span><span class="p">,</span> <span class="nx">index</span><span class="p">)</span> <span class="p">{</span>
<span class="lineno">19</span>       <span class="nx">item</span><span class="p">.</span><span class="nx">dispose</span><span class="p">();</span>
<span class="lineno">20</span>     <span class="p">});</span>
<span class="lineno">21</span>     <span class="k">this</span><span class="p">.</span><span class="nx">off</span><span class="p">();</span>
<span class="lineno">22</span>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">noIoBind</span><span class="p">)</span>
<span class="lineno">23</span>       <span class="k">this</span><span class="p">.</span><span class="nx">ioUnbindAll</span><span class="p">();</span>
<span class="lineno">24</span>     <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
<span class="lineno">25</span>   <span class="p">}</span>
<span class="lineno">26</span> <span class="p">});</span></code></pre></div>


<p>具体的实现方式，可以依据项目的实际情况而定。我在目前的项目中，为View、Model、Collection分别定义基类，提供最基本的资源释放实现。在开发过程中约定，所有的自定义的View、Model和Collection都必须从相应的基类继承，同时在其生命的终点做好善后工作。</p>

<p>此解决方案是一种契约式的。无论在Javascript语言层面，还是Backbone层面，都没有一种机制强制实施。这就需要在项目中，开发人员之间达成共识，以一种规范的形式在团队中明确和落实。</p>

<p>尽管Javascript是具有垃圾回收机制的高级的动态语言，但跳出语言来看，重视资源的及时释放可以带来非常大的好处，可以避免一些很诡异又很难找出原因的问题。祝你使用Javascript编程愉快，使用Backbone少踩坑。:)</p>
 ]]></description>
      </item>
      
      <item>
        <title>我的第一个Node软件包nsignal</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Tue, 28 May 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/05/28/first-nodejs-package.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/05/28/first-nodejs-package.html</guid>
        <comments>http://tkdchen.me/blog/2013/05/28/first-nodejs-package.html#comments</comments>
        <description><![CDATA[ <p>写于2013年5月28日晚</p>

<p>用Javascript写程序已经有段时间了。在Node的环境下，Javascript充分发挥了起长期以来被忽视的强大力量。随着写的Javascript代码越来越多，对这门语言有了更加深入的理解。与此同时，在不断地使用和阅读第三方Node软件包的过程中，越发的感觉到Javascript的潜力无限和未来发展的各种无限可能。你愿意使用Javascirpt写日常的脚本程序吗，写GUI程序吗，开发网络应用吗？</p>

<p>今天花了一点时间，把目前项目中的一个简单的组件剥离了出来，把它放到了<a href="https://github.com/tkdchen/nsignal">github</a>上，同时也快速体验了一把Node软件包分发。</p>

<p>使用下面的命令从Node软件仓库npm中的安装，</p>

<pre><code>npm install nsignal
</code></pre>

<p><a href="https://npmjs.org/package/nsignal">nsignal</a>借鉴了django的Signal机制，与mongoose的模型对象结合使用。使得开发人员能够在某个对象模型发生特定事件的时候，通知注册的处理函数，以完成某些任务。这样，可以将这部分代码和处理模型对象的逻辑，例如create，update和delete，分离开。具体的使用方法，可以参照<a href="https://github.com/tkdchen/nsignal/blob/master/README.md">README.md</a>。</p>

<p>Node软件包发布过程很简单。下面两个方面的内容都做了，成功发布那就是必须的了。</p>

<p>首先，准备源代码。这没什么特别的。其他的项目怎么做，这还怎么做。只不过，需要一些npm所需的文件。其中，package.json是最重要的一个。此外，除了源代码文件，还应该添加以下文件。</p>

<ul>
<li>README.md</li>
<li>LICENSE</li>
</ul>


<p>nsignal使用的目录结构非常简单，只有两层。第一层，也就是根目录，包含了所有了文件，包括源代码文件。第二层是一个名为tests的目录，所有包含测试代码的源文件都会放在这里。</p>

<p>其次，发布。<a href="https://gist.github.com/coolaj86/1318304">Getting Started with NPM (as a developer)</a> 给出了非常详细的步骤，可助你一臂之力。步骤很简单。仔细地，一步一步地跟着做就okay。需要提到提到一点是，<code>npm init</code>不会覆盖你写的package.json。它会向你提几个问题，然后会连同你写的package.json中的所有内容一同创建一份新的出来。</p>

<p>几点感受。</p>

<p>Javascript的简单性充分的体现到了软件包的分发上。一个带有充分信息的package.json是多么的重要。</p>

<p>Javascript的简单性是极具欺骗性的。一旦你上了船，不久就会发现处处被埋伏。一不小心就踩下去。随处可见的回调处理，对传统的程序的顺序执行的思维逻辑形成挑战。当然，这同时也是非常有意思的，在你逐渐熟悉了这种行事方式后。幸好，Node社区的大牛门开发了<a href="https://github.com/caolan/async">async</a>这样一把神器。</p>

<p>在Javascript中写面向对象的代码是多么的难受。很多探路者们已经为像我这样的后来者留下了丰富的、有价值的资产。Node的<code>utils.inherits</code>能够方便的实现类的继承概念。但是，千万不要用在Python、Java、c++里进行OOP经验完全搬到这里。</p>

<p>基于事件的异步模型是现在炙手可热的编程方式，Python有<a href="http://gevent.org/">gevent</a>，Java、Scala、ruby都有各自的实现方案。而V8给予了node先天的能力。只要你开始在node中写Javascript，跑Javascript，你就在享受这种特性。期待更加完备的Javascript。</p>

<p>如果你正沉浸在时髦的Node和Javascript中，祝你好运气，少踩点坑。:)</p>
 ]]></description>
      </item>
      
      <item>
        <title>给Python软件包打RPM包用的SPEC模板</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Sun, 19 May 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/05/19/rpm-spec-for-python-gist.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/05/19/rpm-spec-for-python-gist.html</guid>
        <comments>http://tkdchen.me/blog/2013/05/19/rpm-spec-for-python-gist.html#comments</comments>
        <description><![CDATA[ <p>这个模板可作为为Python软件包制作RPM包的一个起点。它提供了能够成功完成一个RPM包的所有必要的信息。
同时，预留了一些需要根据使用者的实际情况替换的信息。我使用了$var的格式来表明哪些需要用真实值来替
换。</p>

<p>模板遵循Fedora社区的RPM包打包规范。例如，Python软件包对应的RPM包通常加上<code>python-</code>前缀。
如果你是在为一个django框架的扩展包打包，那么前缀应该使用<code>django-</code>。</p>

<div class="highlight"><pre><code class="language-spec" data-lang="spec"><span class="cp">%{!?python_sitelib: %define python_sitelib %(%{__python} -c &quot;from distutils.sysconfig import get_python_lib; print get_python_lib()&quot;)}</span>
%global pkg_name $name

<span class="gh">Name</span><span class="p">:</span> python-<span class="kc">%{pkg_name}</span>
<span class="gh">Version</span><span class="p">:</span> $version
<span class="gh">Release</span><span class="p">:</span> 1<span class="nv">%{?dist}</span>
<span class="gh">Summary</span><span class="p">:</span> $summary

<span class="gh">Group</span><span class="p">:</span> Development/Languages
<span class="gh">License</span><span class="p">:</span> $license
<span class="gh">URL</span><span class="p">:</span> $url
<span class="gh">Source0</span><span class="p">:</span> <span class="kc">%{pkg_name}</span>-<span class="kc">%{version}</span>.tar.gz
<span class="gh">BuildArch</span><span class="p">:</span> noarch

<span class="c"># BuildRequires section here if necessary</span>

<span class="c"># Requires section here if necessary</span>

<span class="nd">%description</span>

<span class="nd">%prep</span>
<span class="k">%setup</span> -q -n <span class="kc">%{pkg_name}</span>-<span class="kc">%{version}</span>

<span class="nd">%build</span>
<span class="nf">%{__python}</span> setup.py build

<span class="nd">%install</span>
rm -rf <span class="vg">$RPM_BUILD_ROOT</span>
<span class="nf">%{__python}</span> setup.py install -O1 --skip-build --root <span class="vg">$RPM_BUILD_ROOT</span>

<span class="nd">%clean</span>
rm -rf <span class="vg">$RPM_BUILD_ROOT</span>

<span class="nd">%files</span>
<span class="k">%defattr</span>(-,root,root,-)
<span class="k">%doc</span> CHANGES.txt LICENSE.txt MANIFEST.in README.rst TODO.txt VERSION.txt
<span class="kc">%{python_sitelib}</span>/<span class="kc">%{pkg_name}</span>/
<span class="kc">%{python_sitelib}</span>/<span class="kc">%{pkg_name}</span>-<span class="kc">%{version}</span>-py*.egg-info/

<span class="nd">%changelog</span></code></pre></div>



 ]]></description>
      </item>
      
      <item>
        <title>跟家还得带着口罩</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Tue, 30 Apr 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/04/30/02-wear-mask-even-if-at-home.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/04/30/02-wear-mask-even-if-at-home.html</guid>
        <comments>http://tkdchen.me/blog/2013/04/30/02-wear-mask-even-if-at-home.html#comments</comments>
        <description><![CDATA[ <p>春暖花开，满世界生机勃勃。但也是我一年中，鼻子最痛苦的时候。这个时候出个门如果口罩，
就得备一卷卫生纸。甚至跟家还得带着点口罩，因为要开窗通风。如果要去个植物园那样的地方，
口罩可是我的神啊。</p>

<p><img src="http://farm9.staticflickr.com/8540/8694526863_198ea71813_z.jpg" alt="Wearing Mask" /></p>
 ]]></description>
      </item>
      
      <item>
        <title>失眠</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Tue, 30 Apr 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/04/30/01-insomnia.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/04/30/01-insomnia.html</guid>
        <comments>http://tkdchen.me/blog/2013/04/30/01-insomnia.html#comments</comments>
        <description><![CDATA[ <p>写于2013年4月最后一天，凌晨3点。</p>

<p>失眠了。第一次这么严重的睡不着。我想，肯定是失眠了。身体躺在床上翻来覆去始终找不到一个舒服的入睡的姿势。脑子里跟过火车似的，满脑子都是事情。像泉水一样，往外冒。根本就不再自己的控制范围之内。现在在硬撑着敲这些字。脑袋发沉，倦意已浓，希望一会儿能尽快入睡。鼻炎不再影响今天的睡眠。第一次失眠了，让我学会了一个单词，<a href="http://cn.bing.com/dict/search?q=insomnia">insomnia</a>。</p>

<p>晚安！</p>
 ]]></description>
      </item>
      
      <item>
        <title>开始用jekyll在Github Pages上写东西</title>
        <author>qcxhome@gmail.com</author>
        <pubDate>Tue, 30 Apr 2013 00:00:00 +0800</pubDate>
        <link>http://tkdchen.me/blog/2013/04/30/00-pages-with-jekyll-is-ready.html</link>
        <guid isPermaLink="true">http://tkdchen.me/blog/2013/04/30/00-pages-with-jekyll-is-ready.html</guid>
        <comments>http://tkdchen.me/blog/2013/04/30/00-pages-with-jekyll-is-ready.html#comments</comments>
        <description><![CDATA[ <p>写于2013年4月最后一天凌晨</p>

<p>经过一个下午的尝试，终于把jekyll搞定。熟悉jekyll的使用方法后，发布文章会变得非常轻松。没有什么更多的可说的了。Github的发展方向让人充满想象。任
何可以用git管理的东西都可以在Github上托管。以至于可以遇见的到，任何我想要与他人分享的内容都可以借助于这个公共的平台。内容管理完全自足，自由，没有任
何限制。只不过，发布之前自己的先做好审核。否则，一不小心你的小秘密就公之于众了。</p>
 ]]></description>
      </item>
      
   </channel>
</rss>
